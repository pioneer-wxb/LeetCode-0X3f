class Solution(object):
###
时间复杂度：O(N)
空间复杂度：O(1)
###
    法1：公式解法
    def maxScore(self, cardPoints, k):
        """
        :type cardPoints: List[int]
        :type k: int
        :rtype: int
        """
        arr = cardPoints[-k:] + cardPoints[:k]
        ans = 0
        total = 0
        for i, x in enumerate(arr):
            total += x
            if i < k-1:
                continue
            ans = max(ans, total)
            total -= arr[i-k+1]
        return ans

    法2：逆向思维
    def maxScore(self, cardPoints, k):
        """
        :type cardPoints: List[int]
        :type k: int
        :rtype: int
        """
        n = len(cardPoints)
        m = n-k
        min_s = s = sum(cardPoints[:m])
        for i in range(m, n):
            s += cardPoints[i] - cardPoints[i-m]
            min_s = min(min_s, s)
        return sum(cardPoints) - min_s
